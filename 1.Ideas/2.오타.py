import sys

# 암소 베시는 새로운 노트북을 구입했다. 그러나 그녀는 불행하게도 작은 키보드에 비해 큰 발굽의 크기로 인해 입력을 잘 할 수 없다는 것을 알았다. 베시는 그녀가 좋아하는 패턴 중 한가지를 타이핑 하려고 한다. 그것은 균형 잡힌 괄호 문자열이다. 그러나, 그녀는 글자 하나를 잘못 입력 한 것을 깨달았다. 즉, 왼쪽 괄호를 뒤집거나 혹은 오른쪽 괄호를 뒤집는 실수이다.

# 베시를 도와서 하나의 괄호를 반대로 하면 전체 문자열이 균형 잡히게 되는 위치의 수를 계산하여라.

# 균형 잡힌 괄호 문자열이 되려면 ‘(‘의 수와 ‘)’의 수가 반드시 동일해야 하고, ‘)’ 앞에 ‘(‘가 많거나 같은 수가 있어야 한다.

# 예를 들어, 다음의 문자열은 모두 균형 잡힌 괄호 문자열이다.
# ()
# (())
# ()(()())

# 아래 문자열은 균형 잡힌 괄호 문자열이 아니다
# )(
# ())(
# ((())))

# 입력 1은
# 12345678
# ( )( ( ) ) ) )
# 2을 뒤집으면 (((()))), 5번을 뒤집으면 ()((())),
# 6번을 뒤집으면 ()(()()), 7번을 뒤집으면 ()(())()
# 총 4개의 위치가 가능하다.

# 입력 설명

# 첫 번째 줄에 N개의 괄호 문자열이 입력된다. (1≤N≤100,000, 짝수)
# 글자 하나가 잘못 입력된 문자열이나 정상 문자열이 입력된다.

# 출력 설명

# 하나의 괄호를 반대로 하면 전체 문자열이 균형 잡히게 되는 위치의 수를 출력하라.

# 입출력 예시
# 입력 1

# ()(())))

# 출력 1

# 4
 
def input_data():
    readl = sys.stdin.readline
    str_input = readl().strip()
    return str_input
 
# 문자열을 왼쪽부터 읽을 때, 어느 순간에도 ')' 개수가 '(' 개수를 넘으면 안 됨!
def solve():
    cnt = 0  # 현재까지 열린 '(' 와 닫힌 ')'의 균형 정도 
    cnt_open = 0  # 연속해서 열린 괄호 '('의 개수
    cnt_close = 0  # 지금까지 닫힌 괄호 ')'의 개수
    
    for c in str_input:
        # 문자열 순회
        if c is '(':
            cnt += 1
            cnt_open += 1
        else:
            cnt -= 1
            cnt_close+=1
        
        # 불균형 감지    
        if cnt < 0:  # 닫는 괄호가 많아짐
            sol = cnt_close  # 그 때까지 나온 닫는 괄호의 수가 정답!
            break
        if cnt <= 1:
            cnt_open = 0
            
    else:  # break 없이 끝까지 다 돌았을 때만 실행
        sol = cnt_open
    return sol
 
sol = -1
 
# 입력받는 부분
str_input = input_data()
 
# 여기서부터 작성
sol = solve()
 
# 출력하는 부분
print(sol)

